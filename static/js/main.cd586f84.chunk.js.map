{"version":3,"sources":["components/Home/index.js","queries/index.js","containers/Home/index.js","components/Profile/index.js","containers/Profile/index.js","components/Header/index.js","components/Layout/index.js","App.js","serviceWorker.js","index.js"],"names":["Meta","Card","ArtistCard","artist","name","nationality","imageUrl","hoverable","style","width","margin","cover","alt","src","title","description","Container","styled","div","GET_POPULAR_ARTISTS","gql","GET_ARTIST_PROFILE","Home","useQuery","data","loading","error","size","glutter","popular_artists","artists","map","key","id","md","sm","xs","to","ArtworksContainer","Item","Descriptions","Profile","props","match","params","variables","bio","birthday","gender","deathday","artworks","years","label","artwork","Header","Layout","Logo","BaseHeader","theme","mode","Content","Wrapper","BaseLayout","children","App","exact","path","component","Boolean","window","location","hostname","cache","InMemoryCache","client","ApolloClient","uri","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.cd586f84.chunk.js","sourcesContent":["import React from 'react'\nimport styled from 'styled-components'\n\nimport {\n  Card\n} from 'antd'\n\n\nconst { Meta } = Card\n\nexport const ArtistCard = ({ artist }) => {\n  const { name, nationality, imageUrl } = artist\n  return (\n    <Card\n      hoverable\n      style={{ width: 240, margin: '2% 0' }}\n      cover={<img alt=\"example\" src={imageUrl} />}\n    >\n      <Meta title={name} description={nationality} />\n    </Card>\n  )\n}\n\nexport const Container = styled.div`\nwidth: 90%\n`\n","import gql from \"graphql-tag\";\n\n\nconst GET_POPULAR_ARTISTS = gql`\n  {\n    popular_artists {\n    artists {\n      id,\n      name,\n      nationality,\n      imageUrl\n    } \n  }\n  }\n`;\n\nconst GET_ARTIST_PROFILE = gql`\n query ARTIST_PROFILE($id: String!) {\n    artist(id: $id) {\n      id,\n      name,\n      bio,\n      years,\n      birthday,\n      deathday,\n      nationality,\n      imageUrl,\n      gender,\n      artworks{\n        id,\n        title,\n        imageUrl\n      }\n    }\n  }\n`;\n\nexport {\n  GET_ARTIST_PROFILE,\n  GET_POPULAR_ARTISTS\n}","import React from 'react'\nimport { useQuery } from \"react-apollo\"\nimport {\n  Row,\n  Col,\n  Spin,\n  Empty\n} from 'antd'\nimport { Link } from 'react-router-dom'\n\nimport { ArtistCard, Container } from '../../components/Home'\nimport { GET_POPULAR_ARTISTS } from '../../queries'\n\n\n//TODO: add pagination\nconst Home = () => {\n\n  const {\n    data,\n    loading,\n    error\n  } = useQuery(GET_POPULAR_ARTISTS)\n\n  if (loading) return <Spin size=\"large\" />\n  if (error) return <p>ERROR</p>\n  if (!data) return <Empty />\n\n  return (\n    <Container>\n      <h1>Popular Artists</h1>\n      <br />\n      <Row glutter={[16, 16]}>\n        {\n          data && data.popular_artists && data.popular_artists.artists\n          && data.popular_artists.artists.map(artist =>\n            <Col key={artist.id} md={8} sm={12} xs={24}>\n              <Link to={`profile/${artist.id}`}>\n                <ArtistCard artist={artist} />\n              </Link>\n            </Col>\n          )\n        }\n      </Row>\n\n    </Container >\n  )\n}\nexport default Home","import styled from 'styled-components'\n\n\nexport const Container = styled.div`\nwidth: 90%;\nmargin: 2% 0\n`\n\nexport const ArtworksContainer = styled.div`\nmargin: 2%;\ndisplay: center;\njustify-content: center;\nalign-items: center\n`","import React from 'react'\nimport { useQuery } from \"react-apollo\"\n\nimport {\n  Descriptions,\n  Spin,\n  Empty,\n  Card,\n  Row,\n  Col\n} from 'antd'\n\nimport { GET_ARTIST_PROFILE } from '../../queries'\nimport { ArtworksContainer, Container } from '../../components/Profile'\n\n\nconst { Item } = Descriptions\nconst { Meta } = Card\n\n\n\nconst Profile = (props) => {\n\n  const id = props.match.params.id\n\n  const {\n    data,\n    loading,\n    error\n  } = useQuery(GET_ARTIST_PROFILE, {\n    variables: { id }\n  })\n\n  if (loading) return <Spin size=\"large\" />;\n  if (error) return <p>ERROR</p>;\n  if (!data) return <Empty />;\n\n\n  const { name, bio, nationality, birthday, gender, deathday, imageUrl, artworks, years } = data.artist\n\n\n  return (\n    <Container>\n      <Row>\n        <Col md={8} xs={24}>\n          <Card\n            style={{ width: 240 }}\n            cover={<img alt=\"example\" src={imageUrl} />}\n          >\n            <Meta title={name} description={nationality} />\n          </Card>\n        </Col>\n        <Col md={16} xs={24}>\n          <Descriptions>\n            <Item label=\"Name\">{name || 'N/A'}</Item>\n            <Item label=\"Nationality\">{nationality || 'N/A'}</Item>\n            <Item label=\"Years\">{years || 'N/A'}</Item>\n            <Item label=\"Birthday\">{birthday || 'N/A'}</Item>\n            <Item label=\"Deathday\">{deathday || 'N/A'}</Item>\n            <Item label=\"gender\">{gender || 'N/A'}</Item>\n          </Descriptions>\n          <br />\n          <Descriptions>\n            <Item label=\"Bio\">{bio || 'N/A'}</Item>\n          </Descriptions>\n        </Col>\n\n      </Row>\n      <br />\n      <ArtworksContainer>\n\n        <h1>Art Works</h1>\n        <Row glutter={[16, 16]}>\n          { !data &&  <Empty />}\n          {\n             artworks && \n             artworks.map(artwork =>\n              <Col key={artwork.id} md={6} sm={12} xs={24}>\n                <Card\n                  style={{ width: 140, margin: '3%' }}\n                  cover={<img alt=\"example\" src={artwork.imageUrl} />}\n                >\n                  <Meta title={artwork.title} />\n                </Card>\n              </Col>\n            )\n          }\n        </Row>\n      </ArtworksContainer>\n\n    </Container >\n  )\n}\nexport default Profile","import React from 'react'\nimport styled from 'styled-components'\nimport {\n  Link\n} from \"react-router-dom\";\nimport {\n  Menu,\n  Layout\n} from 'antd'\n\nconst { Header } = Layout\nconst Logo = styled.div`\n  width: 50px;\n  height: 50px;\n  float: left;\n  margin-right: 2%;\n  cursor: pointer\n`\n\nconst BaseHeader = () => {\n  return (\n    <Header>\n      <Link to=\"/\">\n        <Logo>\n          <img src=\"/logo.png\" alt=\"\" style={{ width: '100%' }} />\n        </Logo>\n      </Link>\n      <Menu theme=\"dark\" mode=\"horizontal\" >\n        <Menu.Item >\n          <Link to=\"/\">\n            Home\n          </Link>\n        </Menu.Item>\n\n      </Menu>\n    </Header>\n  )\n}\nexport default BaseHeader","import React from 'react'\nimport { Layout } from 'antd';\nimport styled from 'styled-components'\n\nimport Header from '../Header'\n\n\nconst { Content } = Layout;\n\n\nconst Wrapper = styled(Layout)`\n  background-color: white;\n  width: 100%;\n \n`\n\nconst Container = styled(Content)`\n    padding: 2%; \n    display: flex;\n    justify-content: center;\n    align-items: center;\n    min-height: 500px\n\n`\n\n\nconst BaseLayout = ({ children }) => {\n  return (\n    <Wrapper>\n      <Header />\n      <Container>\n        {children}\n      </Container>\n    </Wrapper>\n  )\n}\n\n\nexport default BaseLayout","import React from 'react';\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n} from \"react-router-dom\";\n\nimport Home from './containers/Home'\nimport Profile from './containers/Profile'\nimport Layout from './components/Layout'\n\nconst App = () => {\n  return (\n    <div>\n      <Router>\n        <Layout>\n          <Switch>\n            <Route exact path=\"/\" component={Home} />\n            <Route path=\"/profile/:id\" component={Profile} />\n          </Switch>\n        </Layout>\n      </Router>\n    </div >\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport ApolloClient from \"apollo-boost\";\nimport { ApolloProvider } from \"react-apollo\";\nimport { InMemoryCache } from \"apollo-cache-inmemory\";\nimport { toIdValue } from 'apollo-utilities';\n\n\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nconst ApiURI = \"https://metaphysics-staging.artsy.net\";\n\nconst cache = new InMemoryCache({\n\n});\n\nconst client = new ApolloClient({\n  cache,\n  uri: ApiURI\n});\n\nReactDOM.render(\n  <React.StrictMode>\n    <ApolloProvider client={client}>\n      <App />\n    </ApolloProvider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}